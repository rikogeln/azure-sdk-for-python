# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._remote_rendering_rest_client_enums import *


class Conversion(msrest.serialization.Model):
    """Conversion.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The id of the conversion supplied when the conversion was created.
    :type id: str
    :param settings: Required. Settings for where to retrieve input files from and where to write
     output files. Supplied when creating the conversion.
    :type settings: ~azure.mixedreality.remoterendering._generated.models.ConversionSettings
    :ivar output: Information about the output of a successful conversion. Only present when the
     status of the conversion is 'Succeeded'.
    :vartype output: ~azure.mixedreality.remoterendering._generated.models.ConversionOutput
    :param error: Required. The error object containing details about the conversion failure.
    :type error: ~azure.mixedreality.remoterendering._generated.models.Error
    :param status: Required. The status of the conversion. Terminal states are 'Cancelled',
     'Failed', 'Succeeded'. Possible values include: "NotStarted", "Running", "Cancelled", "Failed",
     "Succeeded".
    :type status: str or ~azure.mixedreality.remoterendering._generated.models.ConversionStatus
    :param creation_time: Required. The time when the conversion was created. Date and time in ISO
     8601 format.
    :type creation_time: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True},
        'settings': {'required': True},
        'output': {'readonly': True},
        'error': {'required': True},
        'status': {'required': True},
        'creation_time': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'settings': {'key': 'settings', 'type': 'ConversionSettings'},
        'output': {'key': 'output', 'type': 'ConversionOutput'},
        'error': {'key': 'error', 'type': 'Error'},
        'status': {'key': 'status', 'type': 'str'},
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: str,
        settings: "ConversionSettings",
        error: "Error",
        status: Union[str, "ConversionStatus"],
        creation_time: datetime.datetime,
        **kwargs
    ):
        super(Conversion, self).__init__(**kwargs)
        self.id = id
        self.settings = settings
        self.output = None
        self.error = error
        self.status = status
        self.creation_time = creation_time


class ConversionInputSettings(msrest.serialization.Model):
    """Settings for the conversion input.

    All required parameters must be populated in order to send to Azure.

    :param storage_container_uri: Required. The URI of the Azure blob storage container containing
     the input model.
    :type storage_container_uri: str
    :param storage_container_read_list_sas: An Azure blob storage container shared access signature
     giving read and list access to the storage container. Optional. If not is not provided the
     Azure Remote Rendering rendering account needs to be linked with the storage account containing
     the blob container.
    :type storage_container_read_list_sas: str
    :param blob_prefix: Only Blobs starting with this prefix will be downloaded to perform the
     conversion.
    :type blob_prefix: str
    :param relative_input_asset_path: Required. The relative path starting at blobPrefix (or at the
     container root if blobPrefix is not specified) to the input model. Must point to file with a
     supported file format ending.
    :type relative_input_asset_path: str
    """

    _validation = {
        'storage_container_uri': {'required': True},
        'relative_input_asset_path': {'required': True},
    }

    _attribute_map = {
        'storage_container_uri': {'key': 'storageContainerUri', 'type': 'str'},
        'storage_container_read_list_sas': {'key': 'storageContainerReadListSas', 'type': 'str'},
        'blob_prefix': {'key': 'blobPrefix', 'type': 'str'},
        'relative_input_asset_path': {'key': 'relativeInputAssetPath', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        storage_container_uri: str,
        relative_input_asset_path: str,
        storage_container_read_list_sas: Optional[str] = None,
        blob_prefix: Optional[str] = None,
        **kwargs
    ):
        super(ConversionInputSettings, self).__init__(**kwargs)
        self.storage_container_uri = storage_container_uri
        self.storage_container_read_list_sas = storage_container_read_list_sas
        self.blob_prefix = blob_prefix
        self.relative_input_asset_path = relative_input_asset_path


class ConversionList(msrest.serialization.Model):
    """ConversionList.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param conversions: Required. The list of conversions.
    :type conversions: list[~azure.mixedreality.remoterendering._generated.models.Conversion]
    :ivar next_link: If more conversions are available this link with the same authentication
     header can be used to retrieve further values.
    :vartype next_link: str
    """

    _validation = {
        'conversions': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'conversions': {'key': 'conversions', 'type': '[Conversion]'},
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        conversions: List["Conversion"],
        **kwargs
    ):
        super(ConversionList, self).__init__(**kwargs)
        self.conversions = conversions
        self.next_link = None


class ConversionOutput(msrest.serialization.Model):
    """Information about the output of a successful conversion. Only present when the status of the conversion is 'Succeeded'.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar output_asset_uri: URL of the asset generated by the conversion process.
    :vartype output_asset_uri: str
    """

    _validation = {
        'output_asset_uri': {'readonly': True},
    }

    _attribute_map = {
        'output_asset_uri': {'key': 'outputAssetUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConversionOutput, self).__init__(**kwargs)
        self.output_asset_uri = None


class ConversionOutputSettings(msrest.serialization.Model):
    """Settings for the conversion output.

    All required parameters must be populated in order to send to Azure.

    :param storage_container_uri: Required. The URI of the Azure blob storage container where the
     result of the conversion should be written to.
    :type storage_container_uri: str
    :param storage_container_write_sas: An Azure blob storage container shared access signature
     giving write access to the storage container. Optional. If not is not provided the Azure Remote
     Rendering rendering account needs to be linked with the storage account containing the blob
     container.
    :type storage_container_write_sas: str
    :param blob_prefix: A prefix which gets prepended in front of all files produced by the
     conversion process. Will be treaded as a virtual folder.
    :type blob_prefix: str
    :param output_asset_filename: The file name of the output asset. Must end in '.arrAsset'.
    :type output_asset_filename: str
    """

    _validation = {
        'storage_container_uri': {'required': True},
    }

    _attribute_map = {
        'storage_container_uri': {'key': 'storageContainerUri', 'type': 'str'},
        'storage_container_write_sas': {'key': 'storageContainerWriteSas', 'type': 'str'},
        'blob_prefix': {'key': 'blobPrefix', 'type': 'str'},
        'output_asset_filename': {'key': 'outputAssetFilename', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        storage_container_uri: str,
        storage_container_write_sas: Optional[str] = None,
        blob_prefix: Optional[str] = None,
        output_asset_filename: Optional[str] = None,
        **kwargs
    ):
        super(ConversionOutputSettings, self).__init__(**kwargs)
        self.storage_container_uri = storage_container_uri
        self.storage_container_write_sas = storage_container_write_sas
        self.blob_prefix = blob_prefix
        self.output_asset_filename = output_asset_filename


class ConversionSettings(msrest.serialization.Model):
    """Settings for where to retrieve input files from and where to write output files. Supplied when creating the conversion.

    All required parameters must be populated in order to send to Azure.

    :param input_location: Required. Settings for the conversion input.
    :type input_location:
     ~azure.mixedreality.remoterendering._generated.models.ConversionInputSettings
    :param output_location: Required. Settings for the conversion output.
    :type output_location:
     ~azure.mixedreality.remoterendering._generated.models.ConversionOutputSettings
    """

    _validation = {
        'input_location': {'required': True},
        'output_location': {'required': True},
    }

    _attribute_map = {
        'input_location': {'key': 'inputLocation', 'type': 'ConversionInputSettings'},
        'output_location': {'key': 'outputLocation', 'type': 'ConversionOutputSettings'},
    }

    def __init__(
        self,
        *,
        input_location: "ConversionInputSettings",
        output_location: "ConversionOutputSettings",
        **kwargs
    ):
        super(ConversionSettings, self).__init__(**kwargs)
        self.input_location = input_location
        self.output_location = output_location


class CreateConversionSettings(msrest.serialization.Model):
    """Request to start a conversion.

    All required parameters must be populated in order to send to Azure.

    :param settings: Required. Settings for where to retrieve input files from and where to write
     output files. Supplied when creating the conversion.
    :type settings: ~azure.mixedreality.remoterendering._generated.models.ConversionSettings
    """

    _validation = {
        'settings': {'required': True},
    }

    _attribute_map = {
        'settings': {'key': 'settings', 'type': 'ConversionSettings'},
    }

    def __init__(
        self,
        *,
        settings: "ConversionSettings",
        **kwargs
    ):
        super(CreateConversionSettings, self).__init__(**kwargs)
        self.settings = settings


class CreateSessionSettings(msrest.serialization.Model):
    """CreateSessionSettings.

    All required parameters must be populated in order to send to Azure.

    :param max_lease_time_minutes: Required. The time in minutes the session will run after
     reaching the 'Ready' state.
    :type max_lease_time_minutes: int
    :param size: Required. Size of the server used for the rendering session. Remote Rendering with
     Standard size server has a maximum scene size of 20 million polygons. Remote Rendering with
     Premium size does not enforce a hard maximum, but performance may be degraded if your content
     exceeds the rendering capabilities of the service. Possible values include: "Standard",
     "Premium".
    :type size: str or ~azure.mixedreality.remoterendering._generated.models.SessionSize
    """

    _validation = {
        'max_lease_time_minutes': {'required': True},
        'size': {'required': True},
    }

    _attribute_map = {
        'max_lease_time_minutes': {'key': 'maxLeaseTimeMinutes', 'type': 'int'},
        'size': {'key': 'size', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        max_lease_time_minutes: int,
        size: Union[str, "SessionSize"],
        **kwargs
    ):
        super(CreateSessionSettings, self).__init__(**kwargs)
        self.max_lease_time_minutes = max_lease_time_minutes
        self.size = size


class Error(msrest.serialization.Model):
    """Error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code.
    :type code: str
    :param message: Required. A human-readable representation of the error.
    :type message: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.mixedreality.remoterendering._generated.models.Error]
    :ivar target: The target of the particular error (e.g., the name of the property in error).
    :vartype target: str
    :ivar inner_error: An object containing more specific information than the current object about
     the error.
    :vartype inner_error: ~azure.mixedreality.remoterendering._generated.models.Error
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'details': {'readonly': True},
        'target': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'target': {'key': 'target', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = None
        self.target = None
        self.inner_error = None


class ErrorResponse(msrest.serialization.Model):
    """ErrorResponse.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error object containing details of why the request failed.
    :type error: ~azure.mixedreality.remoterendering._generated.models.Error
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: "Error",
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class SessionProperties(msrest.serialization.Model):
    """SessionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The id of the session supplied when the sessions was created.
    :type id: str
    :ivar arr_inspector_port: The TCP port at which the Azure Remote Rendering Inspector tool is
     hosted.
    :vartype arr_inspector_port: int
    :ivar handshake_port: The TCP port used for the handshake.
    :vartype handshake_port: int
    :ivar elapsed_time_minutes: Amount of time in minutes the session is or has been in Ready
     state. Time is rounded down to a full minute.
    :vartype elapsed_time_minutes: int
    :ivar hostname: The hostname under which the rendering session is reachable.
    :vartype hostname: str
    :ivar max_lease_time_minutes: The time in minutes the session will run after reaching the
     'Ready' state.
    :vartype max_lease_time_minutes: int
    :param size: Required. Size of the server used for the rendering session. Remote Rendering with
     Standard size server has a maximum scene size of 20 million polygons. Remote Rendering with
     Premium size does not enforce a hard maximum, but performance may be degraded if your content
     exceeds the rendering capabilities of the service. Possible values include: "Standard",
     "Premium".
    :type size: str or ~azure.mixedreality.remoterendering._generated.models.SessionSize
    :param status: Required. The status of the rendering session. Once the status reached the
     'Ready' state it can be connected to. The terminal state is 'Stopped'. Possible values include:
     "Error", "Expired", "Starting", "Ready", "Stopped".
    :type status: str or ~azure.mixedreality.remoterendering._generated.models.SessionStatus
    :ivar teraflops: The computational power of the rendering session GPU measured in Teraflops.
    :vartype teraflops: float
    :ivar error: The error object containing details about the rendering session startup failure.
    :vartype error: ~azure.mixedreality.remoterendering._generated.models.Error
    :ivar creation_time: The time when the rendering session was created. Date and time in ISO 8601
     format.
    :vartype creation_time: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True},
        'arr_inspector_port': {'readonly': True, 'maximum': 65534, 'minimum': 49152},
        'handshake_port': {'readonly': True, 'maximum': 65534, 'minimum': 49152},
        'elapsed_time_minutes': {'readonly': True},
        'hostname': {'readonly': True},
        'max_lease_time_minutes': {'readonly': True},
        'size': {'required': True},
        'status': {'required': True},
        'teraflops': {'readonly': True},
        'error': {'readonly': True},
        'creation_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'arr_inspector_port': {'key': 'arrInspectorPort', 'type': 'int'},
        'handshake_port': {'key': 'handshakePort', 'type': 'int'},
        'elapsed_time_minutes': {'key': 'elapsedTimeMinutes', 'type': 'int'},
        'hostname': {'key': 'hostname', 'type': 'str'},
        'max_lease_time_minutes': {'key': 'maxLeaseTimeMinutes', 'type': 'int'},
        'size': {'key': 'size', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'teraflops': {'key': 'teraflops', 'type': 'float'},
        'error': {'key': 'error', 'type': 'Error'},
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: str,
        size: Union[str, "SessionSize"],
        status: Union[str, "SessionStatus"],
        **kwargs
    ):
        super(SessionProperties, self).__init__(**kwargs)
        self.id = id
        self.arr_inspector_port = None
        self.handshake_port = None
        self.elapsed_time_minutes = None
        self.hostname = None
        self.max_lease_time_minutes = None
        self.size = size
        self.status = status
        self.teraflops = None
        self.error = None
        self.creation_time = None


class SessionsList(msrest.serialization.Model):
    """The result of a list sessions request.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param sessions: Required. The list of rendering sessions. Does not include sessions in
     'Stopped' state.
    :type sessions: list[~azure.mixedreality.remoterendering._generated.models.SessionProperties]
    :ivar next_link: If more rendering sessions are available this link with the same
     authentication header can be used to retrieve further values.
    :vartype next_link: str
    """

    _validation = {
        'sessions': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'sessions': {'key': 'sessions', 'type': '[SessionProperties]'},
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sessions: List["SessionProperties"],
        **kwargs
    ):
        super(SessionsList, self).__init__(**kwargs)
        self.sessions = sessions
        self.next_link = None


class UpdateSessionSettings(msrest.serialization.Model):
    """UpdateSessionSettings.

    All required parameters must be populated in order to send to Azure.

    :param max_lease_time_minutes: Required. Update to the time the session will run after it
     reached the 'Ready' state.  It has to be bigger than the current value of maxLeaseTimeMinutes.
    :type max_lease_time_minutes: int
    """

    _validation = {
        'max_lease_time_minutes': {'required': True},
    }

    _attribute_map = {
        'max_lease_time_minutes': {'key': 'maxLeaseTimeMinutes', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        max_lease_time_minutes: int,
        **kwargs
    ):
        super(UpdateSessionSettings, self).__init__(**kwargs)
        self.max_lease_time_minutes = max_lease_time_minutes
