# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class RemoteRenderingRestClientOperationsMixin(object):

    def create_conversion(
        self,
        account_id,  # type: str
        conversion_id,  # type: str
        body,  # type: "models.CreateConversionSettings"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.Conversion"
        """Creates a conversion using an asset stored in an Azure Blob Storage account.

        Creates a conversion using an asset stored in an Azure Blob Storage account.
        If the remote rendering account has been linked with the storage account no Shared Access
        Signatures (storageContainerReadListSas, storageContainerWriteSas) for storage access need to
        be provided.
        Documentation how to link your Azure Remote Rendering account with the Azure Blob Storage
        account can be found in the `documentation <https://docs.microsoft.com/azure/remote-
        rendering/how-tos/create-an-account#link-storage-accounts>`_.

        All files in the input container starting with the blobPrefix will be retrieved to perform the
        conversion. To cut down on conversion times only necessary files should be available under the
        blobPrefix.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :param conversion_id: An ID uniquely identifying the conversion for the given account. The ID
         is case sensitive, can contain any combination of alphanumeric characters including hyphens and
         underscores, and cannot contain more than 256 characters.
        :type conversion_id: str
        :param body: Request body configuring the settings for an asset conversion.
        :type body: ~azure.mixedreality.remoterendering._generated.models.CreateConversionSettings
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Conversion, or the result of cls(response)
        :rtype: ~azure.mixedreality.remoterendering._generated.models.Conversion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Conversion"]
        error_map = {
            404: ResourceNotFoundError,
            400: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
            409: lambda response: ResourceExistsError(response=response, model=self._deserialize(models.ErrorResponse, response)),
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_conversion.metadata['url']  # type: ignore
        path_format_arguments = {
            'account_id': self._serialize.url("account_id", account_id, 'str'),
            'conversion_id': self._serialize.url("conversion_id", conversion_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'CreateConversionSettings')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers['MS-CV']=self._deserialize('str', response.headers.get('MS-CV'))
            deserialized = self._deserialize('Conversion', pipeline_response)

        if response.status_code == 201:
            response_headers['MS-CV']=self._deserialize('str', response.headers.get('MS-CV'))
            deserialized = self._deserialize('Conversion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    create_conversion.metadata = {'url': '/accounts/{account_id}/conversions/{conversion_id}'}  # type: ignore

    def get_conversion(
        self,
        account_id,  # type: str
        conversion_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.Conversion"
        """Gets the status of a previously created asset conversion.

        Gets the status of a previously created asset conversion.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :param conversion_id: An ID uniquely identifying the conversion for the given account. The ID
         is case sensitive, can contain any combination of alphanumeric characters including hyphens and
         underscores, and cannot contain more than 256 characters.
        :type conversion_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Conversion, or the result of cls(response)
        :rtype: ~azure.mixedreality.remoterendering._generated.models.Conversion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Conversion"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"

        # Construct URL
        url = self.get_conversion.metadata['url']  # type: ignore
        path_format_arguments = {
            'account_id': self._serialize.url("account_id", account_id, 'str'),
            'conversion_id': self._serialize.url("conversion_id", conversion_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['MS-CV']=self._deserialize('str', response.headers.get('MS-CV'))
        response_headers['Retry-After']=self._deserialize('int', response.headers.get('Retry-After'))
        deserialized = self._deserialize('Conversion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get_conversion.metadata = {'url': '/accounts/{account_id}/conversions/{conversion_id}'}  # type: ignore

    def list_conversions(
        self,
        account_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.ConversionList"]
        """Gets a list of all conversions. Returns a batch of conversions- if more conversions are available the @nextLink property contains the a URL where the next batch of conversions can be requested. This URL will need the same authentication as all calls to the Azure Remote Rendering API.

        Gets a list of all conversions. Returns a batch of conversions- if more conversions are
        available the @nextLink property contains the a URL where the next batch of conversions can be
        requested. This URL will need the same authentication as all calls to the Azure Remote
        Rendering API.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ConversionList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.mixedreality.remoterendering._generated.models.ConversionList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ConversionList"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_conversions.metadata['url']  # type: ignore
                path_format_arguments = {
                    'account_id': self._serialize.url("account_id", account_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('ConversionList', pipeline_response)
            list_of_elem = deserialized.conversions
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_conversions.metadata = {'url': '/accounts/{account_id}/conversions'}  # type: ignore

    def create_session(
        self,
        account_id,  # type: str
        session_id,  # type: str
        body,  # type: "models.CreateSessionSettings"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SessionProperties"
        """Creates a new rendering session.

        Creates a new rendering session.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :param session_id: An ID uniquely identifying the rendering session for the given account. The
         ID is case sensitive, can contain any combination of alphanumeric characters including hyphens
         and underscores, and cannot contain more than 256 characters.
        :type session_id: str
        :param body: Settings of the session to be created.
        :type body: ~azure.mixedreality.remoterendering._generated.models.CreateSessionSettings
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SessionProperties, or the result of cls(response)
        :rtype: ~azure.mixedreality.remoterendering._generated.models.SessionProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SessionProperties"]
        error_map = {
            404: ResourceNotFoundError,
            400: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
            409: lambda response: ResourceExistsError(response=response, model=self._deserialize(models.ErrorResponse, response)),
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'account_id': self._serialize.url("account_id", account_id, 'str'),
            'session_id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'CreateSessionSettings')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            deserialized = self._deserialize('SessionProperties', pipeline_response)

        if response.status_code == 201:
            response_headers['MS-CV']=self._deserialize('str', response.headers.get('MS-CV'))
            deserialized = self._deserialize('SessionProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    create_session.metadata = {'url': '/accounts/{account_id}/sessions/{session_id}'}  # type: ignore

    def get_session(
        self,
        account_id,  # type: str
        session_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SessionProperties"
        """Gets properties of a particular rendering session.

        Gets properties of a particular rendering session.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :param session_id: An ID uniquely identifying the rendering session for the given account. The
         ID is case sensitive, can contain any combination of alphanumeric characters including hyphens
         and underscores, and cannot contain more than 256 characters.
        :type session_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SessionProperties, or the result of cls(response)
        :rtype: ~azure.mixedreality.remoterendering._generated.models.SessionProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SessionProperties"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"

        # Construct URL
        url = self.get_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'account_id': self._serialize.url("account_id", account_id, 'str'),
            'session_id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SessionProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_session.metadata = {'url': '/accounts/{account_id}/sessions/{session_id}'}  # type: ignore

    def update_session(
        self,
        account_id,  # type: str
        session_id,  # type: str
        body,  # type: "models.UpdateSessionSettings"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SessionProperties"
        """Updates a particular rendering session.

        Updates a particular rendering session.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :param session_id: An ID uniquely identifying the rendering session for the given account. The
         ID is case sensitive, can contain any combination of alphanumeric characters including hyphens
         and underscores, and cannot contain more than 256 characters.
        :type session_id: str
        :param body: Settings of the session to be updated.
        :type body: ~azure.mixedreality.remoterendering._generated.models.UpdateSessionSettings
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SessionProperties, or the result of cls(response)
        :rtype: ~azure.mixedreality.remoterendering._generated.models.SessionProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SessionProperties"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            422: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'account_id': self._serialize.url("account_id", account_id, 'str'),
            'session_id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'UpdateSessionSettings')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SessionProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update_session.metadata = {'url': '/accounts/{account_id}/sessions/{session_id}'}  # type: ignore

    def stop_session(
        self,
        account_id,  # type: str
        session_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Stops a particular rendering session.

        Stops a particular rendering session.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :param session_id: An ID uniquely identifying the rendering session for the given account. The
         ID is case sensitive, can contain any combination of alphanumeric characters including hyphens
         and underscores, and cannot contain more than 256 characters.
        :type session_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"

        # Construct URL
        url = self.stop_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'account_id': self._serialize.url("account_id", account_id, 'str'),
            'session_id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['MS-CV']=self._deserialize('str', response.headers.get('MS-CV'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    stop_session.metadata = {'url': '/accounts/{account_id}/sessions/{session_id}/:stop'}  # type: ignore

    def list_sessions(
        self,
        account_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.SessionsList"]
        """Get a list of all rendering sessions.

        Get a list of all rendering sessions.

        :param account_id: the Azure Remote Rendering account id.
        :type account_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SessionsList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.mixedreality.remoterendering._generated.models.SessionsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SessionsList"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            500: lambda response: HttpResponseError(response=response, model=self._deserialize(models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-01-01-preview"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_sessions.metadata['url']  # type: ignore
                path_format_arguments = {
                    'account_id': self._serialize.url("account_id", account_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('SessionsList', pipeline_response)
            list_of_elem = deserialized.sessions
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_sessions.metadata = {'url': '/accounts/{account_id}/sessions'}  # type: ignore
